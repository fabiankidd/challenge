{"ast":null,"code":"import { catchError, retry, throwError } from 'rxjs';\nimport { environment } from 'src/environments/environment.development';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(http) {\n    this.http = http;\n  }\n  handleError(error) {\n    if (error.status === 0) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurreds:', error.error);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong.\n      console.error(`Backend returned code ${error.status}, body was: `, error.error);\n    }\n    // Return an observable with a user-facing error message.\n    return throwError(() => new Error('Something bad happened; please try again later.'));\n  }\n  getData(country) {\n    return this.http.get(`${environment.api_url}` + country).pipe(retry(3),\n    //retry failed request (max 3 retries)\n    catchError(this.handleError)); //call the error handler above\n  }\n  static #_ = this.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["catchError","retry","throwError","environment","ApiService","constructor","http","handleError","error","status","console","Error","getData","country","get","api_url","pipe","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\dev\\challenge\\src\\app\\services\\api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, catchError, retry, throwError } from 'rxjs';\nimport { environment } from 'src/environments/environment.development';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n\n  constructor(private http: HttpClient) { }\n\n  private handleError(error: HttpErrorResponse) {\n    if (error.status === 0) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurreds:', error.error);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong.\n      console.error(\n        `Backend returned code ${error.status}, body was: `, error.error);\n    }\n    // Return an observable with a user-facing error message.\n    return throwError(() => new Error('Something bad happened; please try again later.'));\n  }\n\n  getData(country: string): Observable<any[]> {\n    return this.http.get<any[]>(`${environment.api_url}` + country)\n    .pipe(retry(3), //retry failed request (max 3 retries)\n    catchError(this.handleError)); //call the error handler above\n  }\n\n}\n"],"mappings":"AAEA,SAAqBA,UAAU,EAAEC,KAAK,EAAEC,UAAU,QAAQ,MAAM;AAChE,SAASC,WAAW,QAAQ,0CAA0C;;;AAKtE,OAAM,MAAOC,UAAU;EAErBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAgB;EAEhCC,WAAWA,CAACC,KAAwB;IAC1C,IAAIA,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;MACtB;MACAC,OAAO,CAACF,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAACA,KAAK,CAAC;KAClD,MAAM;MACL;MACA;MACAE,OAAO,CAACF,KAAK,CACX,yBAAyBA,KAAK,CAACC,MAAM,cAAc,EAAED,KAAK,CAACA,KAAK,CAAC;;IAErE;IACA,OAAON,UAAU,CAAC,MAAM,IAAIS,KAAK,CAAC,iDAAiD,CAAC,CAAC;EACvF;EAEAC,OAAOA,CAACC,OAAe;IACrB,OAAO,IAAI,CAACP,IAAI,CAACQ,GAAG,CAAQ,GAAGX,WAAW,CAACY,OAAO,EAAE,GAAGF,OAAO,CAAC,CAC9DG,IAAI,CAACf,KAAK,CAAC,CAAC,CAAC;IAAE;IAChBD,UAAU,CAAC,IAAI,CAACO,WAAW,CAAC,CAAC,CAAC,CAAC;EACjC;EAAC,QAAAU,CAAA,G;qBAtBUb,UAAU,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAVlB,UAAU;IAAAmB,OAAA,EAAVnB,UAAU,CAAAoB,IAAA;IAAAC,UAAA,EAFT;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}